{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","App.js","index.js"],"names":["baseUrl","personsService","create","newPerson","axios","post","then","response","data","getAll","get","deletePerson","id","delete","update","put","resp","Filter","value","onChange","PersonForm","onSubmit","valueName","valuePhone","onChangeName","onChangePhone","type","Person","each","handleDelete","name","number","onClick","Persons","persons","search","filter","toLowerCase","includes","map","Notification","message","className","App","useState","setPersons","newName","setNewName","newPhone","setNewPhone","setSearch","notification","setNotification","useEffect","setNotificationState","setTimeout","success","e","target","preventDefault","some","window","confirm","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ae6a953.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'; \r\n\r\nconst getAll = () =>{\r\n    const response = axios.get(baseUrl); \r\n    return response.then(response=>response.data); \r\n}\r\n\r\nconst create = newPerson => {\r\n    const response = axios.post(baseUrl, newPerson);\r\n    return response.then(response=>response.data); \r\n}\r\n\r\nconst deletePerson = id =>{\r\n    const response = axios.delete(`${baseUrl}/${id}`); \r\n    return response; \r\n}\r\n\r\nconst update = (id, newPerson) => {\r\n    const response = axios.put(`${baseUrl}/${id}`, newPerson); \r\n    return response.then(resp=>resp.data); \r\n}\r\n\r\nconst personsService = {\r\n    create, getAll, deletePerson, update\r\n}\r\n\r\nexport default personsService","import React from 'react'\r\n\r\nfunction Filter({value, onChange}) {\r\n    return (\r\n        <div>\r\n            Search: <input value={value} onChange={onChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter\r\n","import React from 'react'\r\n\r\nfunction PersonForm({onSubmit, valueName, valuePhone, onChangeName, onChangePhone}) {\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n        <div>\r\n          name:  <input value={valueName} onChange={onChangeName}/> <br/>\r\n          phone: <input value={valuePhone} onChange={onChangePhone}/>\r\n        </div>\r\n\r\n        <div>\r\n          <button type='submit'>add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm\r\n","import React from 'react'\r\n\r\nfunction Person({each, handleDelete}) {\r\n    return (\r\n        <p>Name: {each.name} - Phone: {each.number} <button onClick={handleDelete}>Delete</button></p>\r\n    )\r\n}\r\n\r\nexport default Person\r\n","import React from 'react'\r\nimport Person from './Person'\r\n\r\nfunction Persons({persons, search, handleDelete}) {\r\n    return (\r\n        <div>\r\n            {persons.filter(each=>each.name.toLowerCase().includes(search.toLowerCase())).map(each=>{\r\n            return <Person key={each.id} each={each} handleDelete={()=>handleDelete(each.id)}/>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons\r\n","import './App.css';\nimport {useState, useEffect} from 'react'\nimport personsService from './services/persons';\n\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\n\nfunction Notification({message, type}) {\n  if (!message) return null;\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\n\nfunction App() {\n  const [persons, setPersons] = useState([]); \n\n  const [newName, setNewName] = useState(''); \n  const [newPhone, setNewPhone] = useState(''); \n  const [search, setSearch] = useState(''); \n  const [notification, setNotification] = useState({\n    message: '', type: 'success'\n  }); \n\n  const hook = () =>{\n    personsService.getAll().then(function(response){\n      setPersons(response); \n    })\n  }\n  useEffect(hook, []); \n\n  const setNotificationState = (message, type) =>{\n    setNotification({message, type});\n    setTimeout(()=>setNotification({message:'', success:''}), 3000); \n  }\n\n  const handleNewNameChange = (e) => {\n    setNewName(e.target.value);\n  }\n\n  const handleNewPhoneChange = (e) => {\n    setNewPhone(e.target.value);\n  }\n\n  const handleSearchChange = (e) => {\n    setSearch(e.target.value); \n  }\n\n  function submitForm(e){\n    e.preventDefault(); \n    if (newName==='' || newPhone==='') return; \n\n    // If the new person has the same name as someone from the \n    // list, only this block is run.\n    if (persons.some(each=>each.name===newName)) { \n      if (window.confirm(`Create new entry for ${newName}?`)) {\n\n        let newPerson = {\n          name: newName, number:newPhone, id: persons.length+1\n        }\n        personsService.create(newPerson)\n        .then(response => {\n          setPersons([...persons, response]); \n          setNewName(''); setNewPhone(''); \n          setNotificationState('Person added', 'success'); \n        })\n        return; \n\n        /*\n        const oldPerson = persons.find(each=>each.name === newName); \n        personsService.update(oldPerson.id, {...oldPerson, phone: newPhone})\n        .then(function(resp){\n          setPersons(persons.map(each=>(each.id===oldPerson.id)? resp : each));\n          setNewName(''); \n          setNewPhone(''); \n          setNotificationState('Person updated', 'success');\n        })\n        .catch(err =>{\n          setNotificationState('The person was already deleted', 'error');\n          setNewName(''); setNewPhone(''); \n          setPersons(persons.filter(each=>each.name!==newName));\n        })\n        return; \n        */\n\n      } else {\n        setNewName(''); setNewPhone(''); \n        return; \n      }\n    }; \n\n    // If the person is new, it starts running from here\n    let newPerson = {\n      name: newName, \n      number: newPhone, \n      id: persons.length+1\n    }\n\n    personsService.create(newPerson)\n    .then(response => {\n      setPersons([...persons, response])\n      setNewPhone(''); \n      setNewName(''); \n      setNotificationState('Person added', 'success');\n    })\n  }\n\n  const handleDelete = (id) =>{\n    personsService.deletePerson(id)\n    .then(resp => {\n      setPersons(persons.filter(each=>each.id!==id)); \n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <button onClick={()=>setPersons([])}>Clear all</button>\n      <h2>Phonebook app</h2>\n      <Notification message={notification.message} type={notification.type}/>\n\n      <Filter value={search} onChange={handleSearchChange}/>\n\n      <h2>Add a new Phone</h2>\n      <PersonForm onSubmit={submitForm} valueName={newName} valuePhone={newPhone} onChangeName={handleNewNameChange} onChangePhone={handleNewPhoneChange}/>\n\n      <h2>Numbers</h2>\n      <Persons persons={persons} search={search} handleDelete={handleDelete}/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}